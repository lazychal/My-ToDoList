{"version":3,"sources":["TodoListTask.tsx","TodoListTasks.tsx","TodoListFooter.tsx","api.ts","TodoListTitle.tsx","AddNewItemForm.tsx","reducer.ts","TodoList.tsx","App.tsx","serviceWorker.js","store.ts","index.tsx"],"names":["TodoListTask","onIsDoneChanged","e","status","currentTarget","checked","_this","props","changeStatus","task","id","onTitleChanged","setState","title","value","state","editMode","activateEditMode","deactivateEditMode","changeTitle","onDeleteTask","deleteTask","render","containerCssClass","isDone","priotityTitle","priority","react_default","a","createElement","className","type","onChange","onBlur","autoFocus","onClick","React","Component","TodoListTasks","tasksElements","tasks","map","src_TodoListTask","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","instance","axios","create","baseURL","withCredentials","headers","API-KEY","api","getTodolists","get","updateTask","t","obj","put","Object","objectSpread2","createTodolist","post","deleteTodolist","todolistId","delete","getTasks","concat","createTask","newText","taskId","updateTodoList","newTitle","TodoListTitle","changeTodolistTitle","then","res","onDelete","AddNewItemForm","error","onAddItemClick","addItem","onKeyPress","key","classNameForInput","placeholder","ADD_TASK","initialState","todolists","updateTaskAC","deleteTodolistAC","deleteTaskAC","addTaskAC","newTask","setTasksAC","reducer","arguments","length","undefined","action","tl","toConsumableArray","newTodolist","filter","console","log","TodoList","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getTasksT","addTask","addNewTask","newFilterValue","changeTask","changeTaskNow","deleteTL","deleteTaskNow","_this$props$tasks","src_TodoListTitle","src_AddNewItemForm","src_TodoListTasks","src_TodoListFooter","this","ConnectedTodolist","connect","dispatch","setTasks","updateTodoListAC","todoListId","todolisId","_ref3","asyncToGenerator","regenerator_default","mark","_callee3","wrap","_context3","prev","next","allTasks","data","items","stop","_x3","apply","_ref4","_callee4","_context4","item","_x4","addNewTaskTC","_ref5","_callee5","_context5","_x5","deleteTLTC","_ref6","_callee6","_context6","_x6","deleteTaskNowTC","_ref7","_callee7","_context7","forEach","_x7","changeTaskNowTC","App","addTodoList","createTodoList","src_TodoList","Fragment","ConnectedApp","todolist","_ref","_callee","_context","_x","_ref2","_callee2","_context2","_x2","createTodoListTC","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f09d6adc.chunk.js","sourcesContent":["import React, {ChangeEvent} from 'react';\nimport './App.css';\nimport {TaskType} from \"./types/entities\";\n\ntype TLTType = {\n    task: TaskType\n}\ntype FuncType = {\n    changeStatus: (taskId: string, status: number) => void\n    changeTitle: (taskId: string, title: string) => void\n    deleteTask: (taskId: string) => void\n}\n\nclass TodoListTask extends React.Component<TLTType & FuncType> {\n\n    onIsDoneChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        let status = e.currentTarget.checked ? 2 : 0;\n        this.props.changeStatus(this.props.task.id, status);\n    };\n\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({title: e.currentTarget.value})\n    };\n\n    state = {\n        editMode: false,\n        title: this.props.task.title\n    };\n\n    activateEditMode = () => {\n        this.setState({editMode: true});\n\n    };\n\n    deactivateEditMode = () => {\n        this.setState({editMode: false});\n        this.props.changeTitle(this.props.task.id, this.state.title);\n    };\n    onDeleteTask = () => {\n        this.props.deleteTask(this.props.task.id);\n    };\n    render = () => {\n        let containerCssClass = this.props.task.isDone ? \"todoList-task done\" : \"todoList-task\";\n        let priotityTitle = \"\";\n        switch (this.props.task.priority) {\n            case 0:\n                priotityTitle = \"Low\";\n                break;\n            case 1:\n                priotityTitle = \"Middle\";\n                break;\n            case 2:\n                priotityTitle = \"High\";\n                break;\n            case 3:\n                priotityTitle = \"Urgently\";\n                break;\n            case 4:\n                priotityTitle = \"Later\";\n                break;\n        }\n        return (\n            <div className={containerCssClass}>\n                <input type=\"checkbox\" checked={this.props.task.status === 2}\n                       onChange={this.onIsDoneChanged}/>\n                {this.state.editMode\n                    ? <input onBlur={this.deactivateEditMode} onChange={this.onTitleChanged} autoFocus={true}\n                             value={this.state.title}/>\n                    : <span onClick={this.activateEditMode}>{this.props.task.title}</span>\n                }, priority: {priotityTitle}\n                <button onClick={this.onDeleteTask}>X</button>\n            </div>\n        );\n    }\n}\n\nexport default TodoListTask;","import React from 'react';\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\nimport {TaskType} from \"./types/entities\";\n\ntype FuncType = {\n    changeStatus: (taskId: string, status: number) => void\n    changeTitle: (taskId: string, title: string) => void\n    deleteTask: (taskId: string) => void\n}\ntype TLTType = {\n    tasks: Array<TaskType>\n}\n\nclass TodoListTasks extends React.Component<FuncType & TLTType> {\n    render = () => {\n        let tasksElements = this.props.tasks.map(\n            task => <TodoListTask task={task} changeStatus={this.props.changeStatus}\n                                  changeTitle={this.props.changeTitle}\n                                  deleteTask={this.props.deleteTask}\n            />);\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElements}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport '../src/App.css';\n\ntype FuncType = {\n    changeFilter: (newFilterValue: string)=> void\n    filterValue: string\n}\n\nclass TodoListFooter extends React.Component<FuncType> {\n    state = {\n        isHidden: false\n    };\n\n    onAllFilterClick = () => { this.props.changeFilter(\"All\") };\n    onCompletedFilterClick = () => { this.props.changeFilter(\"Completed\") };\n    onActiveFilterClick = () => { this.props.changeFilter(\"Active\") };\n    onShowFiltersClick = () => { this.setState({isHidden: true}) };\n    onHideFiltersClick = () => { this.setState({isHidden: false}) };\n\n    render = () => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                { !this.state.isHidden && <div>\n                     <button onClick={ this.onAllFilterClick } className={classForAll}>All</button>\n                     <button onClick={ this.onCompletedFilterClick } className={classForCompleted}>Completed</button>\n                     <button onClick={ this.onActiveFilterClick } className={classForActive}>Active</button>\n                  </div>\n                }\n                { !this.state.isHidden && <span onClick={ this.onShowFiltersClick }>hide</span> }\n                { this.state.isHidden && <span onClick={ this.onHideFiltersClick }>show</span> }\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import axios from 'axios';\r\nimport {TaskType} from \"./types/entities\";\r\n\r\ntype AddTodoListResponseType = {\r\n    data: {\r\n        item: TaskType\r\n    }\r\n    resultCode: number\r\n    messages: Array<string>\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/todo-lists\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"08777951-79e8-4107-8dc3-392484b36531\"}\r\n});\r\n\r\n\r\nexport const api = {\r\n    getTodolists (){\r\n        return instance.get('')\r\n    },\r\n    updateTask (t: TaskType, obj: any){\r\n        return instance.put(`/tasks`,{...t, ...obj})\r\n    },\r\n    createTodolist (title: string){\r\n        return instance.post<AddTodoListResponseType>('',{title: title})\r\n    },\r\n    deleteTodolist (todolistId: string){\r\n        return instance.delete('' + todolistId)\r\n    },\r\n    getTasks (todolistId: string){\r\n        return instance.get(`/${todolistId}/tasks`)\r\n    },\r\n    createTask(newText: string, todolistId: string){\r\n        return instance.post(`/${todolistId}/tasks`,{title: newText})\r\n    },\r\n    deleteTask(taskId: string, todolistId: string){\r\n        return instance.delete(`/tasks/${taskId}`)\r\n    },\r\n    updateTodoList(todolistId: string, newTitle: string){\r\n        return instance.put(`/${todolistId}`, {title: newTitle})\r\n    },\r\n\r\n};","import React, {ChangeEvent} from 'react';\nimport './App.css';\nimport {api} from \"./api\";\n\n\ntype FuncType = {\n    updateTodoList: (todolistId: string, newTitle: string) => void\n    onDelete: () => void\n}\ntype TLTType = {\n    title: string\n    todolistId: string\n}\n\nclass TodoListTitle extends React.Component<TLTType&FuncType> {\n    state = {\n        editMode: false,\n        title: this.props.title\n    };\n    deactivateEditMode = () => {\n        this.setState({editMode: false});\n        this.changeTodolistTitle(this.props.todolistId, this.state.title);\n    };\n    activateEditMode = () => {\n        this.setState({editMode: true});\n\n    };\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({title: e.currentTarget.value})\n    };\n    changeTodolistTitle = (todolistId: string, newTitle: string) => {\n                api.updateTodoList(todolistId, newTitle)\n                    .then(res => {\n                        this.props.updateTodoList(todolistId, newTitle);\n                    });\n            };\n\n\n   render = () => {\n        return (\n                <h3 className=\"todoList-header__title\">\n\n                    { this.state.editMode\n                        ? <input\n                            onBlur={this.deactivateEditMode}\n                            onChange={this.onTitleChanged}\n                            autoFocus={true}\n                            value={this.state.title}\n                        />\n                        :\n                        <span\n                            onClick={this.activateEditMode}\n                        >{this.props.title}</span>\n                    }\n\n\n                    <button onClick={this.props.onDelete}>X</button></h3>\n        );\n    }\n}\n\nexport default TodoListTitle;\n\n","import React, {ChangeEvent} from 'react';\nimport './App.css';\n\ntype FunctionType = {\n    addItem: (title: string)=> void\n}\n\nclass AddNewItemForm extends React.Component<FunctionType> {\n    state = {\n        error: false,\n        title: \"\"\n    };\n\n    onAddItemClick = () => {\n        let newText = this.state.title;\n        this.setState({title: \"\"});\n\n        if (newText === \"\") {\n            this.setState({error: true});\n        } else {\n            this.setState({error: false});\n            // передаём новый текст наружу\n            this.props.addItem(newText);\n        }\n    };\n\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        debugger\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        });\n    };\n\n    onKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        debugger\n        if (e.key === \"Enter\") {\n            this.onAddItemClick();\n        }\n    };\n\n\n    render = () => {\n        let classNameForInput = this.state.error ? \"error\" : \"\";\n\n        return (\n            <div className=\"todoList-newTaskForm\">\n                <input className={classNameForInput} type=\"text\" placeholder=\"New item name\"\n                       onChange={this.onTitleChanged}\n                       onKeyPress={this.onKeyPress}\n                       value={this.state.title}/>\n                <button onClick={this.onAddItemClick}>Add</button>\n            </div>\n\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","import {api} from \"./api\";\r\nimport {ChangeTaskType, TaskType, TodoListType} from \"./types/entities\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./store\";\r\n\r\nexport const ADD_TODOLIST = \"TodoList/Reducer/ADD-TODOLIST\";\r\nexport const DELETE_TODOLIST = \"TodoList/Reducer/DELETE-TODOLIST\";\r\nexport const DELETE_TASK = \"TodoList/Reducer/DELETE-TASK\";\r\nexport const ADD_TASK = \"TodoList/Reducer/ADD-TASK\";\r\nexport const SET_TASKS = \"TodoList/Reducer/SET_TASKS\";\r\nexport const UPDATE_TASK = \"TodoList/Reducer/UPDATE-TASK\";\r\nexport const SET_TODOLISTS = \"TodoList/Reducer/SET_TODOLISTS\";\r\nexport const UPDATE_TODOLIST = \"TodoList/Reducer/UPDATE_TODOLIST\";\r\n\r\ntype InitialStateType = {\r\n    todolists: Array<TodoListType>\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    \"todolists\": []\r\n};\r\n\r\nconst reducer = (state: InitialStateType = initialState, action: TodoActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id !== action.todolistId) {\r\n                        return tl;\r\n                    } else {\r\n                        return {...tl, tasks: action.tasks}\r\n                    }\r\n                })\r\n            };\r\n        case SET_TODOLISTS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(tl => ({...tl, tasks: []}))\r\n            };\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, action.newTodolist]\r\n            };\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => tl.id !== action.todolistId)\r\n            };\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.filter(t => t.id !== action.taskId)\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map((tl: TodoListType) => {\r\n                    if (tl.id === action.todolistId && tl.tasks) {\r\n                        return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map((tl: TodoListType)  => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.map((t: TaskType) => {\r\n                                if (t.id !== action.taskId) {\r\n                                    return t;\r\n                                } else {\r\n                                    return {...t, ...action.obj};\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case UPDATE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            title: action.title\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n    }\r\n    console.log(\"reducer: \", action);\r\n    return state;\r\n};\r\n\r\ntype UpdateTodoListACType = {\r\n    type: typeof UPDATE_TODOLIST\r\n    todolistId: string\r\n    title: string\r\n}\r\ntype UpdateTaskACType = {\r\n    type: typeof UPDATE_TASK\r\n    taskId: string\r\n    obj: ChangeTaskType\r\n    todolistId: string\r\n}\r\ntype DeleteTodolistACType = {\r\n    type: typeof DELETE_TODOLIST\r\n    todolistId: string\r\n}\r\ntype DeleteTaskACType = {\r\n    type: typeof DELETE_TASK\r\n    todolistId: string\r\n    taskId: string\r\n}\r\ntype AddTaskACType = {\r\n    type: typeof ADD_TASK\r\n    todolistId: string\r\n    newTask: TaskType\r\n}\r\ntype SetTasksACType = {\r\n    type: typeof SET_TASKS\r\n    todolistId: string\r\n    tasks: Array<TaskType>\r\n}\r\ntype AddTodolistACType = {\r\n    type: typeof ADD_TODOLIST\r\n    newTodolist: TodoListType\r\n}\r\ntype SetTodolistsACType = {\r\n    type: typeof SET_TODOLISTS\r\n    todolists: Array<TodoListType>\r\n}\r\n\r\nexport type TodoActionTypes = UpdateTodoListACType|UpdateTaskACType|DeleteTodolistACType|DeleteTaskACType\r\n                        |AddTaskACType|SetTasksACType|AddTodolistACType|SetTodolistsACType\r\n\r\nexport const updateTodoListAC = (todolistId: string, title: string): UpdateTodoListACType => {\r\n    return {type: UPDATE_TODOLIST, todolistId, title}\r\n};\r\nexport const updateTaskAC = (taskId: string, obj: ChangeTaskType, todolistId: string, tasks: Array<TaskType>): UpdateTaskACType => {\r\n    return {type: UPDATE_TASK, taskId, obj, todolistId};\r\n};\r\nexport const deleteTodolistAC = (todolistId: string): DeleteTodolistACType => {\r\n    return {type: DELETE_TODOLIST, todolistId: todolistId};\r\n};\r\nexport const deleteTaskAC = (taskId: string, todolistId: string): DeleteTaskACType => {\r\n    return {type: DELETE_TASK, todolistId, taskId};\r\n};\r\nexport const addTaskAC = (newTask: TaskType, todolistId: string): AddTaskACType => {\r\n    return {type: ADD_TASK, newTask, todolistId};\r\n};\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string): SetTasksACType => {\r\n    return {type: SET_TASKS, tasks, todolistId};\r\n};\r\nexport const addTodolistAC = (newTodolist: TodoListType): AddTodolistACType => {\r\n    return {type: ADD_TODOLIST, newTodolist: newTodolist}\r\n};\r\nexport const setTodolistsAC = (todolists: Array<TodoListType>): SetTodolistsACType => {\r\n    return {type: SET_TODOLISTS,todolists: todolists}\r\n};\r\n\r\n//Thunk\r\nexport type ThunkActionType = ThunkAction<Promise<void>, AppStateType, unknown, TodoActionTypes>\r\nexport const getTodolistTC = (): ThunkActionType => async (dispatch) => {\r\n    api.getTodolists()\r\n        .then(res => {\r\n            dispatch(setTodolistsAC(res.data))\r\n        })\r\n};\r\nexport const createTodoListTC = (title: string): ThunkActionType => async (dispatch) => {\r\n    api.createTodolist(title)\r\n        .then(res => {\r\n            let todolist = res.data.data.item;\r\n            dispatch(addTodolistAC({...todolist, tasks: []}));\r\n        });\r\n};\r\nexport const getTasksTC = (todolisId: string): ThunkActionType => async (dispatch) => {\r\n    api.getTasks(todolisId)\r\n        .then(res => {\r\n            let allTasks = res.data.items;\r\n            dispatch(setTasksAC(allTasks, todolisId));\r\n        });\r\n};\r\nexport const addNewTaskTC = (newTask: string, todolistId: string): ThunkActionType => async (dispatch) => {\r\n    api.createTask(newTask, todolistId)\r\n        .then(res => {\r\n            let newTask = res.data.data.item;\r\n            dispatch(addTaskAC(newTask, todolistId));\r\n        });\r\n};\r\nexport const deleteTLTC = (todolistId: string): ThunkActionType => async (dispatch) => {\r\n    api.deleteTodolist(todolistId)\r\n        .then(() => {\r\n            dispatch(deleteTodolistAC(todolistId));\r\n        });\r\n};\r\n\r\nexport const deleteTaskNowTC = (taskId: string, todolistId: string): ThunkActionType => async (dispatch) => {\r\n    api.deleteTask(taskId, todolistId)\r\n        .then(res => {\r\n            dispatch(deleteTaskAC(taskId, todolistId));\r\n        });\r\n};\r\nexport const changeTaskNowTC = (taskId: string, obj: ChangeTaskType, todoListId: string, tasks: Array <TaskType>): ThunkActionType =>\r\n    async (dispatch) => {\r\n    tasks.forEach(t => {\r\n        if (t.id === taskId) {\r\n            api.updateTask(t, obj)\r\n                .then(res => {\r\n                    dispatch(updateTaskAC(taskId, obj, todoListId, tasks));\r\n                });\r\n        }\r\n    })\r\n};\r\n\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport './App.css';\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport TodoListTitle from \"./TodoListTitle\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {\n    addNewTaskTC,\n    addTaskAC, changeTaskNowTC,\n    deleteTaskAC, deleteTaskNowTC, deleteTLTC,\n    deleteTodolistAC,\n    getTasksTC,\n    setTasksAC,\n    updateTodoListAC\n} from \"./reducer\";\nimport {ChangeTaskType, TaskType} from \"./types/entities\";\n\n\ntype MDTPType = {\n    addTask: (newTask: TaskType, todolistId: string)=> void\n    deleteTodolist: (todolistId: string)=> void\n    deleteTask: (taskId: string, todolistId: string)=> void\n    updateTodoList: (todolistId: string, title: string) => void\n    getTasksT: (todoListId: string) => void\n    addNewTask: (newText: string, todolistId: string) => void\n    deleteTL: (todolistId: string) => void\n    deleteTaskNow: (taskId: string, todolistId: string) => void\n    changeTaskNow: (taskId: string, obj: ChangeTaskType, todoListId: string, tasks: Array<TaskType>) => void\n}\ntype AnotherType = {\n    id: string\n    tasks: Array<TaskType>\n    title: string\n}\n\nclass TodoList extends React.Component<MDTPType&AnotherType> {\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    saveState = () => {\n        // переводим объект в строку\n        let stateAsString = JSON.stringify(this.state);\n        // сохраняем нашу строку в localStorage под ключом \"our-state\"\n        localStorage.setItem(\"our-state-\" + this.props.id, stateAsString);\n    };\n\n    restoreState = () => {\n        this.props.getTasksT(this.props.id);\n    };\n\n    state = {\n        filterValue: \"All\"\n    };\n\n    addTask = (newText: string) => {\n        this.props.addNewTask(newText, this.props.id)\n    };\n\n    changeFilter = (newFilterValue: string) => {\n        this.setState( {\n            filterValue: newFilterValue\n        }, () => { this.saveState(); });\n    };\n\n    changeTask = (taskId: string, obj: ChangeTaskType) => {\n        let tasks = this.props.tasks;\n        this.props.changeTaskNow(taskId, obj, this.props.id, tasks);\n    };\n\n    changeStatus = (taskId: string, status: number) => {\n        debugger\n        this.changeTask(taskId, {status: status});\n    };\n\n    changeTitle = (taskId: string, title: string) => {\n        this.changeTask(taskId, {title: title});\n    };\n\n    deleteTodolist = () => {\n        this.props.deleteTL(this.props.id);\n    };\n\n    deleteTask = (taskId: string) => {\n        this.props.deleteTaskNow(taskId, this.props.id);\n    };\n\n    render = () => {\n        let {tasks = []} = this.props;\n        return (\n                <div className=\"todoList\">\n                    <div className=\"todoList-header\">\n                            <TodoListTitle\n                                title={this.props.title}\n                                todolistId={this.props.id}\n                                onDelete={this.deleteTodolist}\n                                updateTodoList={this.props.updateTodoList}/>\n                            <AddNewItemForm addItem={this.addTask} />\n\n                    </div>\n\n                    <TodoListTasks changeStatus={this.changeStatus }\n                                   changeTitle={this.changeTitle }\n                                   deleteTask={this.deleteTask}\n                                   tasks={tasks.filter((t: TaskType) => {\n                        if (this.state.filterValue === \"All\") {\n                            return true;\n                        }\n                        if (this.state.filterValue === \"Active\") {\n                            return t.isDone === false;\n                        }\n                        if (this.state.filterValue === \"Completed\") {\n                            return t.isDone === true;\n                        }\n                    })}/>\n                    <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue} />\n                </div>\n        );\n    }\n}\n\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        addTask(newTask: TaskType, todolistId: string) {\n            dispatch(addTaskAC(newTask, todolistId));\n        },\n        setTasks(tasks: Array<TaskType>, todolistId: string) {\n            dispatch(setTasksAC(tasks, todolistId));\n        },\n        deleteTodolist: (todolistId: string) => {\n            const action = deleteTodolistAC(todolistId);\n            dispatch(action)\n        },\n        deleteTask: (taskId: string, todolistId: string) => {\n            const action = deleteTaskAC(todolistId, taskId);\n            dispatch(action)\n        },\n        updateTodoList: (todolistId: string, title: string) => {\n            const action = updateTodoListAC(todolistId, title);\n            dispatch(action)\n        },\n        getTasksT: (todoListId: string) => {\n            dispatch(getTasksTC(todoListId));\n        },\n        addNewTask: (newText: string, todolistId: string) => {\n            dispatch(addNewTaskTC(newText, todolistId));\n        },\n        deleteTL: (todolistId: string) => {\n            dispatch(deleteTLTC(todolistId));\n        },\n        deleteTaskNow: (taskId: string, todolistId: string) => {\n            debugger\n            dispatch(deleteTaskNowTC(taskId, todolistId))\n        },\n        changeTaskNow: (taskId: string, obj: ChangeTaskType, todoListId: string, tasks: Array<TaskType>) => {\n            dispatch(changeTaskNowTC(taskId, obj, todoListId, tasks))\n        }\n    }\n};\n\nconst ConnectedTodolist = connect(null, mapDispatchToProps)(TodoList);\n\nexport default ConnectedTodolist;\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {createTodoListTC, getTodolistTC} from \"./reducer\";\nimport {TodoListType} from \"./types/entities\";\nimport {AppStateType} from \"./store\";\n\ntype MDTPType = {\n    addTodoList?: (title: string)=> void\n    getTodolists: ()=> void\n    createTodoList: (title: string)=> void\n}\ntype MSTPType = {\n    todolists: Array<TodoListType>\n}\n\nclass App extends React.Component<MDTPType & MSTPType> {\n\n    state = {\n        todolists: []\n    };\n\n    addTodoList = (title: string) => {\n        this.props.createTodoList(title);\n    };\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    restoreState = () => {\n        this.props.getTodolists();\n    };\n\n    render = () => {\n        const todolists = this.props\n            .todolists\n            .map(tl => <TodoList key={tl.id} id={tl.id} title={tl.title} tasks={tl.tasks}/>);\n\n        return (\n            <>\n                <div>\n                    <AddNewItemForm addItem={this.addTodoList}/>\n                </div>\n                <div className=\"App\">\n                    {todolists}\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MSTPType => {\n    return {\n        todolists: state.todolist.todolists\n    }\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        getTodolists: () => {\n            dispatch(getTodolistTC())\n        },\n        createTodoList : (title: string) => {\n            dispatch(createTodoListTC(title));\n        },\n    }\n};\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default ConnectedApp;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todolist: reducer\r\n});\r\n\r\ntype RootReducer = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducer>\r\n\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n// window.store = store;\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}