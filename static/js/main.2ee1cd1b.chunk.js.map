{"version":3,"sources":["newStyle.module.css","TodoListTask.tsx","TodoListTasks.tsx","TodoListFooter.tsx","api.ts","TodoListTitle.tsx","AddNewItemForm.tsx","reducer.ts","TodoList.tsx","App.tsx","serviceWorker.js","store.ts","index.tsx"],"names":["module","exports","container","deleteTodoList","circle","taskContainer","task","taskValue","taskChecked","FA","check","delete","taskA","title","addSection","taskInput","add","MainAddNewItemForm","list","TodoListTask","onIsDoneChanged","status","_this","props","changeStatus","id","onTitleChanged","e","setState","currentTarget","value","state","editMode","isChecked","activateEditMode","deactivateEditMode","changeTitle","onDeleteTask","deleteTask","onIsChecked","render","react_default","a","createElement","Fragment","className","s","onBlur","onChange","autoFocus","onClick","index_es","icon","faCheck","faTrashAlt","React","Component","TodoListTasks","tasksElements","tasks","map","src_TodoListTask","TodoListFooter","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","classForAll","filterValue","classForCompleted","classForActive","instance","axios","create","baseURL","withCredentials","headers","API-KEY","api","getTodolists","get","updateTask","t","obj","put","Object","objectSpread2","createTodolist","post","deleteTodolist","todolistId","getTasks","concat","createTask","newText","taskId","updateTodoList","newTitle","TodoListTitle","changeTodolistTitle","then","res","AddNewItemForm","error","onAddItemClick","addItem","onKeyPress","key","type","placeholder","ADD_TASK","initialState","todolists","updateTaskAC","deleteTodolistAC","deleteTaskAC","addTaskAC","newTask","setTasksAC","reducer","arguments","length","undefined","action","tl","toConsumableArray","newTodolist","filter","console","log","TodoList","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getTasksT","addTask","addNewTask","newFilterValue","changeTask","changeTaskNow","deleteTL","deleteTaskNow","_this$props$tasks","faTimesCircle","src_TodoListTitle","onDelete","src_AddNewItemForm","src_TodoListTasks","isDone","src_TodoListFooter","this","ConnectedTodolist","connect","dispatch","setTasks","updateTodoListAC","todoListId","todolisId","_ref3","asyncToGenerator","regenerator_default","mark","_callee3","wrap","_context3","prev","next","allTasks","data","items","stop","_x3","apply","_ref4","_callee4","_context4","item","_x4","addNewTaskTC","_ref5","_callee5","_context5","_x5","deleteTLTC","_ref6","_callee6","_context6","_x6","deleteTaskNowTC","_ref7","_callee7","_context7","forEach","changedTask","_x7","changeTaskNowTC","App","addTodoList","createTodoList","src_TodoList","ConnectedApp","todolist","_ref","_callee","_context","_x","_ref2","_callee2","_context2","_x2","createTodoListTC","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ee1cd1b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"newStyle_container__2utr1\",\"deleteTodoList\":\"newStyle_deleteTodoList__3Zgfj\",\"circle\":\"newStyle_circle__ILh7r\",\"taskContainer\":\"newStyle_taskContainer__2gavm\",\"task\":\"newStyle_task__2XEZQ\",\"taskValue\":\"newStyle_taskValue__GnFCN\",\"taskChecked\":\"newStyle_taskChecked__17crZ\",\"FA\":\"newStyle_FA__1-tn9\",\"check\":\"newStyle_check__2cKxS\",\"delete\":\"newStyle_delete__1ZKUa\",\"taskA\":\"newStyle_taskA__27EZS\",\"title\":\"newStyle_title__26W7e\",\"addSection\":\"newStyle_addSection__3y3Sp\",\"taskInput\":\"newStyle_taskInput__13g6f\",\"add\":\"newStyle_add__28hGz\",\"MainAddNewItemForm\":\"newStyle_MainAddNewItemForm__PgTFM\",\"list\":\"newStyle_list__3n9Uw\"};","import React, {ChangeEvent} from 'react';\nimport './App.css';\nimport {TaskType} from \"./types/entities\";\nimport s from \"./newStyle.module.css\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faCheck} from '@fortawesome/free-solid-svg-icons';\nimport {faTrashAlt} from \"@fortawesome/free-regular-svg-icons\";\n\ntype TLTType = {\n    task: TaskType\n}\ntype FuncType = {\n    changeStatus: (taskId: string, status: number) => void\n    changeTitle: (taskId: string, title: string) => void\n    deleteTask: (taskId: string) => void\n}\n\nclass TodoListTask extends React.Component<TLTType & FuncType> {\n\n    onIsDoneChanged = () => {\n        let status = this.props.task.status === 2 ? 0 : 2;\n        this.props.changeStatus(this.props.task.id, status);\n    };\n\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({title: e.currentTarget.value})\n    };\n\n    state = {\n        editMode: false,\n        title: this.props.task.title,\n        isChecked: false,\n    };\n\n    activateEditMode = () => {\n        this.setState({editMode: true});\n\n    };\n\n    deactivateEditMode = () => {\n        this.setState({editMode: false});\n        this.props.changeTitle(this.props.task.id, this.state.title);\n    };\n    onDeleteTask = () => {\n        this.props.deleteTask(this.props.task.id);\n    };\n    onIsChecked = () => {\n        this.setState({isChecked: true})\n    };\n\n    //Begin......................\n\n    render = () => {\n        // let containerCssClass = this.props.task.isDone ? \"todoList-task done\" : \"todoList-task\";\n        // let priotityTitle = \"\";\n        // switch (this.props.task.priority) {\n        //     case 0:\n        //         priotityTitle = \"Low\";\n        //         break;\n        //     case 1:\n        //         priotityTitle = \"Middle\";\n        //         break;\n        //     case 2:\n        //         priotityTitle = \"High\";\n        //         break;\n        //     case 3:\n        //         priotityTitle = \"Urgently\";\n        //         break;\n        //     case 4:\n        //         priotityTitle = \"Later\";\n        //         break;\n        // }\n        return (\n            <>\n                <div className={s.task + ' ' + s.taskA}>\n                    <span className={(this.props.task.status ? s.taskChecked : s.taskValue)}>\n                        {this.state.editMode\n                            ? <input onBlur={this.deactivateEditMode} onChange={this.onTitleChanged} autoFocus={true}\n                                     value={this.state.title}/>\n                            : <span onClick={this.activateEditMode}>{this.props.task.title}</span>\n                        }\n                    </span>\n                    <span className={s.FA}>\n                        <FontAwesomeIcon icon={faCheck} className={s.check} onClick={this.onIsDoneChanged}/>\n                        <FontAwesomeIcon icon={faTrashAlt} className={s.delete} onClick={this.onDeleteTask}/>\n                    </span>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default TodoListTask;","import React from 'react';\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\nimport {TaskType} from \"./types/entities\";\nimport s from \"./newStyle.module.css\";\n\ntype FuncType = {\n    changeStatus: (taskId: string, status: number) => void\n    changeTitle: (taskId: string, title: string) => void\n    deleteTask: (taskId: string) => void\n}\ntype TLTType = {\n    tasks: Array<TaskType>\n}\n\n\n// Begin............\n\nclass TodoListTasks extends React.Component<FuncType & TLTType> {\n    render = () => {\n        let tasksElements = this.props.tasks.map(\n            task => <TodoListTask task={task}\n                                  changeStatus={this.props.changeStatus}\n                                  changeTitle={this.props.changeTitle}\n                                  deleteTask={this.props.deleteTask}\n            />);\n\n        return (\n            <div className={s.list}>\n                <div className={s.taskContainer}>\n                    {tasksElements}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport '../src/App.css';\n\ntype FuncType = {\n    changeFilter: (newFilterValue: string)=> void\n    filterValue: string\n}\n\nclass TodoListFooter extends React.Component<FuncType> {\n    // state = {\n    //     isHidden: false\n    // };\n\n    onAllFilterClick = () => { this.props.changeFilter(\"All\") };\n    onCompletedFilterClick = () => { this.props.changeFilter(\"Completed\") };\n    onActiveFilterClick = () => { this.props.changeFilter(\"Active\") };\n    // onShowFiltersClick = () => { this.setState({isHidden: true}) };\n    // onHideFiltersClick = () => { this.setState({isHidden: false}) };\n\n    render = () => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                {/*{ !this.state.isHidden && <div>*/}\n                     <i onClick={ this.onAllFilterClick } id='all' className={classForAll}>All</i>\n                     <i onClick={ this.onCompletedFilterClick } className={classForCompleted}>Completed</i>\n                     <i onClick={ this.onActiveFilterClick } id='active' className={classForActive}>Active</i>\n                {/*  </div>*/}\n                {/*}*/}\n                {/*{ !this.state.isHidden && <span onClick={ this.onShowFiltersClick }>hide</span> }*/}\n                {/*{ this.state.isHidden && <span onClick={ this.onHideFiltersClick }>show</span> }*/}\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import axios from 'axios';\r\nimport {TaskType} from \"./types/entities\";\r\n\r\ntype AddTodoListResponseType = {\r\n    data: {\r\n        item: TaskType\r\n    }\r\n    resultCode: number\r\n    messages: Array<string>\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/todo-lists\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"08777951-79e8-4107-8dc3-392484b36531\"}\r\n});\r\n\r\n\r\nexport const api = {\r\n    getTodolists (){\r\n        return instance.get('')\r\n    },\r\n    updateTask (t: TaskType, obj: any){\r\n        return instance.put(`/tasks`,{...t, ...obj})\r\n    },\r\n    createTodolist (title: string){\r\n        return instance.post<AddTodoListResponseType>('',{title: title})\r\n    },\r\n    deleteTodolist (todolistId: string){\r\n        return instance.delete('' + todolistId)\r\n    },\r\n    getTasks (todolistId: string){\r\n        return instance.get(`/${todolistId}/tasks`)\r\n    },\r\n    createTask(newText: string, todolistId: string){\r\n        return instance.post(`/${todolistId}/tasks`,{title: newText})\r\n    },\r\n    deleteTask(taskId: string, todolistId: string){\r\n        return instance.delete(`/tasks/${taskId}`)\r\n    },\r\n    updateTodoList(todolistId: string, newTitle: string){\r\n        return instance.put(`/${todolistId}`, {title: newTitle})\r\n    },\r\n\r\n};","import React, {ChangeEvent} from 'react';\nimport './App.css';\nimport {api} from \"./api\";\nimport s from \"./newStyle.module.css\";\n\ntype FuncType = {\n    updateTodoList: (todolistId: string, newTitle: string) => void\n    onDelete: () => void\n}\ntype TLTType = {\n    title: string\n    todolistId: string\n}\n\nclass TodoListTitle extends React.Component<TLTType&FuncType> {\n    state = {\n        editMode: false,\n        title: this.props.title\n    };\n    deactivateEditMode = () => {\n        this.setState({editMode: false});\n        this.changeTodolistTitle(this.props.todolistId, this.state.title);\n    };\n    activateEditMode = () => {\n        this.setState({editMode: true});\n\n    };\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({title: e.currentTarget.value})\n    };\n    changeTodolistTitle = (todolistId: string, newTitle: string) => {\n                api.updateTodoList(todolistId, newTitle)\n                    .then(res => {\n                        this.props.updateTodoList(todolistId, newTitle);\n                    });\n            };\n\n// Begin........ Перед бегином обернул всё в дивку className={s.title}\n   render = () => {\n        return (\n            <div className={s.title}>\n                <h3 className=\"todoList-header__title\">\n                    { this.state.editMode\n                        ? <input\n                            onBlur={this.deactivateEditMode}\n                            onChange={this.onTitleChanged}\n                            autoFocus={true}\n                            value={this.state.title}\n                        />\n                        :\n                        <span\n                            onClick={this.activateEditMode}\n                        >{this.props.title}</span>\n                    }\n\n                    {/*<button onClick={this.props.onDelete}>X</button>*/}\n                </h3>\n            </div>\n        );\n    }\n}\n\nexport default TodoListTitle;\n\n","import React, {ChangeEvent} from 'react';\nimport './App.css';\nimport s from \"./newStyle.module.css\";\n\ntype FunctionType = {\n    addItem: (title: string)=> void\n}\n\n\nclass AddNewItemForm extends React.Component<FunctionType> {\n    state = {\n        error: false,\n        title: \"\"\n    };\n\n\n    onAddItemClick = () => {\n        let newText = this.state.title;\n        this.setState({title: \"\"});\n\n        if (newText === \"\") {\n            this.setState({error: true});\n        } else {\n            this.setState({error: false});\n            // передаём новый текст наружу\n            this.props.addItem(newText);\n        }\n    };\n\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        debugger\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        });\n    };\n\n    onKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        debugger\n        if (e.key === \"Enter\") {\n            this.onAddItemClick();\n        }\n    };\n\n\n// Begin........................\n    render = () => {\n\n        return (\n            <div className={s.addSection}>\n                <input className={s.taskInput} type=\"text\" placeholder=\"New item name\"\n                       onChange={this.onTitleChanged}\n                       onKeyPress={this.onKeyPress}\n                       value={this.state.title}/>\n                <button className={s.add} onClick={this.onAddItemClick}>Add</button>\n            </div>\n\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","import {api} from \"./api\";\r\nimport {ChangeTaskType, TaskType, TodoListType} from \"./types/entities\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./store\";\r\n\r\nexport const ADD_TODOLIST = \"TodoList/Reducer/ADD-TODOLIST\";\r\nexport const DELETE_TODOLIST = \"TodoList/Reducer/DELETE-TODOLIST\";\r\nexport const DELETE_TASK = \"TodoList/Reducer/DELETE-TASK\";\r\nexport const ADD_TASK = \"TodoList/Reducer/ADD-TASK\";\r\nexport const SET_TASKS = \"TodoList/Reducer/SET_TASKS\";\r\nexport const UPDATE_TASK = \"TodoList/Reducer/UPDATE-TASK\";\r\nexport const SET_TODOLISTS = \"TodoList/Reducer/SET_TODOLISTS\";\r\nexport const UPDATE_TODOLIST = \"TodoList/Reducer/UPDATE_TODOLIST\";\r\n\r\ntype InitialStateType = {\r\n    todolists: Array<TodoListType>\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    \"todolists\": []\r\n};\r\n\r\nconst reducer = (state: InitialStateType = initialState, action: TodoActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id !== action.todolistId) {\r\n                        return tl;\r\n                    } else {\r\n                        return {...tl, tasks: action.tasks}\r\n                    }\r\n                })\r\n            };\r\n        case SET_TODOLISTS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(tl => ({...tl, tasks: []}))\r\n            };\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, action.newTodolist]\r\n            };\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => tl.id !== action.todolistId)\r\n            };\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.filter(t => t.id !== action.taskId)\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map((tl: TodoListType) => {\r\n                    if (tl.id === action.todolistId && tl.tasks) {\r\n                        return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map((tl: TodoListType)  => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.map((t: TaskType) => {\r\n                                if (t.id !== action.taskId) {\r\n                                    return t;\r\n                                } else {\r\n                                    return {...t, ...action.obj};\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case UPDATE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            title: action.title\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n    }\r\n    console.log(\"reducer: \", action);\r\n    return state;\r\n};\r\n\r\ntype UpdateTodoListACType = {\r\n    type: typeof UPDATE_TODOLIST\r\n    todolistId: string\r\n    title: string\r\n}\r\ntype UpdateTaskACType = {\r\n    type: typeof UPDATE_TASK\r\n    taskId: string\r\n    obj: ChangeTaskType\r\n    todolistId: string\r\n}\r\ntype DeleteTodolistACType = {\r\n    type: typeof DELETE_TODOLIST\r\n    todolistId: string\r\n}\r\ntype DeleteTaskACType = {\r\n    type: typeof DELETE_TASK\r\n    todolistId: string\r\n    taskId: string\r\n}\r\ntype AddTaskACType = {\r\n    type: typeof ADD_TASK\r\n    todolistId: string\r\n    newTask: TaskType\r\n}\r\ntype SetTasksACType = {\r\n    type: typeof SET_TASKS\r\n    todolistId: string\r\n    tasks: Array<TaskType>\r\n}\r\ntype AddTodolistACType = {\r\n    type: typeof ADD_TODOLIST\r\n    newTodolist: TodoListType\r\n}\r\ntype SetTodolistsACType = {\r\n    type: typeof SET_TODOLISTS\r\n    todolists: Array<TodoListType>\r\n}\r\n\r\nexport type TodoActionTypes = UpdateTodoListACType|UpdateTaskACType|DeleteTodolistACType|DeleteTaskACType\r\n                        |AddTaskACType|SetTasksACType|AddTodolistACType|SetTodolistsACType\r\n\r\nexport const updateTodoListAC = (todolistId: string, title: string): UpdateTodoListACType => {\r\n    return {type: UPDATE_TODOLIST, todolistId, title}\r\n};\r\nexport const updateTaskAC = (taskId: string, obj: ChangeTaskType, todolistId: string, tasks: Array<TaskType>): UpdateTaskACType => {\r\n    return {type: UPDATE_TASK, taskId, obj, todolistId};\r\n};\r\nexport const deleteTodolistAC = (todolistId: string): DeleteTodolistACType => {\r\n    return {type: DELETE_TODOLIST, todolistId: todolistId};\r\n};\r\nexport const deleteTaskAC = (taskId: string, todolistId: string): DeleteTaskACType => {\r\n    return {type: DELETE_TASK, todolistId, taskId};\r\n};\r\nexport const addTaskAC = (newTask: TaskType, todolistId: string): AddTaskACType => {\r\n    return {type: ADD_TASK, newTask, todolistId};\r\n};\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string): SetTasksACType => {\r\n    return {type: SET_TASKS, tasks, todolistId};\r\n};\r\nexport const addTodolistAC = (newTodolist: TodoListType): AddTodolistACType => {\r\n    return {type: ADD_TODOLIST, newTodolist: newTodolist}\r\n};\r\nexport const setTodolistsAC = (todolists: Array<TodoListType>): SetTodolistsACType => {\r\n    return {type: SET_TODOLISTS,todolists: todolists}\r\n};\r\n\r\n//Thunk\r\nexport type ThunkActionType = ThunkAction<Promise<void>, AppStateType, unknown, TodoActionTypes>\r\nexport const getTodolistTC = (): ThunkActionType => async (dispatch) => {\r\n    api.getTodolists()\r\n        .then(res => {\r\n            dispatch(setTodolistsAC(res.data))\r\n        })\r\n};\r\nexport const createTodoListTC = (title: string): ThunkActionType => async (dispatch) => {\r\n    api.createTodolist(title)\r\n        .then(res => {\r\n            let todolist = res.data.data.item;\r\n            dispatch(addTodolistAC({...todolist, tasks: []}));\r\n        });\r\n};\r\nexport const getTasksTC = (todolisId: string): ThunkActionType => async (dispatch) => {\r\n    api.getTasks(todolisId)\r\n        .then(res => {\r\n            let allTasks = res.data.items;\r\n            dispatch(setTasksAC(allTasks, todolisId));\r\n        });\r\n};\r\nexport const addNewTaskTC = (newTask: string, todolistId: string): ThunkActionType => async (dispatch) => {\r\n    api.createTask(newTask, todolistId)\r\n        .then(res => {\r\n            let newTask = res.data.data.item;\r\n            dispatch(addTaskAC(newTask, todolistId));\r\n        });\r\n};\r\nexport const deleteTLTC = (todolistId: string): ThunkActionType => async (dispatch) => {\r\n    api.deleteTodolist(todolistId)\r\n        .then(() => {\r\n            dispatch(deleteTodolistAC(todolistId));\r\n        });\r\n};\r\n\r\nexport const deleteTaskNowTC = (taskId: string, todolistId: string): ThunkActionType => async (dispatch) => {\r\n    api.deleteTask(taskId, todolistId)\r\n        .then(res => {\r\n            dispatch(deleteTaskAC(taskId, todolistId));\r\n        });\r\n};\r\nexport const changeTaskNowTC = (taskId: string, obj: ChangeTaskType, todoListId: string, tasks: Array <TaskType>): ThunkActionType =>\r\n    async (dispatch) => {\r\n    tasks.forEach(t => {\r\n        if (t.id === taskId) {\r\n            debugger\r\n            api.updateTask(t, obj)\r\n                .then(res => {\r\n\r\n                    let changedTask = res.data.data.item;\r\n                    dispatch(updateTaskAC(taskId, changedTask, todoListId, tasks));\r\n                });\r\n        }\r\n    })\r\n};\r\n\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport './App.css';\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport TodoListTitle from \"./TodoListTitle\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {\n    addNewTaskTC,\n    addTaskAC, changeTaskNowTC,\n    deleteTaskAC, deleteTaskNowTC, deleteTLTC,\n    deleteTodolistAC,\n    getTasksTC,\n    setTasksAC,\n    updateTodoListAC\n} from \"./reducer\";\nimport {ChangeTaskType, TaskType} from \"./types/entities\";\nimport s from \"./newStyle.module.css\";\nimport {faTimesCircle} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\n\ntype MDTPType = {\n    addTask: (newTask: TaskType, todolistId: string)=> void\n    deleteTodolist: (todolistId: string)=> void\n    deleteTask: (taskId: string, todolistId: string)=> void\n    updateTodoList: (todolistId: string, title: string) => void\n    getTasksT: (todoListId: string) => void\n    addNewTask: (newText: string, todolistId: string) => void\n    deleteTL: (todolistId: string) => void\n    deleteTaskNow: (taskId: string, todolistId: string) => void\n    changeTaskNow: (taskId: string, obj: ChangeTaskType, todoListId: string, tasks: Array<TaskType>) => void\n}\ntype AnotherType = {\n    id: string\n    tasks: Array<TaskType>\n    title: string\n}\n\n// Begin..............................\n\nclass TodoList extends React.Component<MDTPType&AnotherType> {\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    saveState = () => {\n        // переводим объект в строку\n        let stateAsString = JSON.stringify(this.state);\n        // сохраняем нашу строку в localStorage под ключом \"our-state\"\n        localStorage.setItem(\"our-state-\" + this.props.id, stateAsString);\n    };\n\n    restoreState = () => {\n        this.props.getTasksT(this.props.id);\n    };\n\n    state = {\n        filterValue: \"All\"\n    };\n\n    addTask = (newText: string) => {\n        this.props.addNewTask(newText, this.props.id)\n    };\n\n    changeFilter = (newFilterValue: string) => {\n        this.setState( {\n            filterValue: newFilterValue\n        }, () => { this.saveState(); });\n    };\n\n    changeTask = (taskId: string, obj: ChangeTaskType) => {\n        let tasks = this.props.tasks;\n        this.props.changeTaskNow(taskId, obj, this.props.id, tasks);\n    };\n\n    changeStatus = (taskId: string, status: number) => {\n        debugger\n        this.changeTask(taskId, {status: status});\n    };\n\n    changeTitle = (taskId: string, title: string) => {\n        this.changeTask(taskId, {title: title});\n    };\n\n    deleteTodolist = () => {\n        this.props.deleteTL(this.props.id);\n    };\n\n    deleteTask = (taskId: string) => {\n        this.props.deleteTaskNow(taskId, this.props.id);\n    };\n\n    render = () => {\n        let {tasks = []} = this.props;\n        return (\n                <div className={s.container}>\n                    <div className=\"todoList-header max\">\n                        <span className={s.deleteTodoList} title='Delete this list'>\n                            <FontAwesomeIcon icon={faTimesCircle} className={s.circle} onClick={this.deleteTodolist} />\n                        </span>\n                            <TodoListTitle\n                                title={this.props.title}\n                                todolistId={this.props.id}\n                                onDelete={this.deleteTodolist}\n                                updateTodoList={this.props.updateTodoList}/>\n                            <AddNewItemForm addItem={this.addTask} />\n\n                    </div>\n\n                    <TodoListTasks changeStatus={this.changeStatus }\n                                   changeTitle={this.changeTitle }\n                                   deleteTask={this.deleteTask}\n                                   tasks={tasks.filter((t: TaskType) => {\n                        if (this.state.filterValue === \"All\") {\n                            return true;\n                        }\n                        if (this.state.filterValue === \"Active\") {\n                            return t.isDone === false;\n                        }\n                        if (this.state.filterValue === \"Completed\") {\n                            return t.isDone === true;\n                        }\n                    })}/>\n                    <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue} />\n                </div>\n        );\n    }\n}\n\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        addTask(newTask: TaskType, todolistId: string) {\n            dispatch(addTaskAC(newTask, todolistId));\n        },\n        setTasks(tasks: Array<TaskType>, todolistId: string) {\n            dispatch(setTasksAC(tasks, todolistId));\n        },\n        deleteTodolist: (todolistId: string) => {\n            const action = deleteTodolistAC(todolistId);\n            dispatch(action)\n        },\n        deleteTask: (taskId: string, todolistId: string) => {\n            const action = deleteTaskAC(todolistId, taskId);\n            dispatch(action)\n        },\n        updateTodoList: (todolistId: string, title: string) => {\n            const action = updateTodoListAC(todolistId, title);\n            dispatch(action)\n        },\n        getTasksT: (todoListId: string) => {\n            dispatch(getTasksTC(todoListId));\n        },\n        addNewTask: (newText: string, todolistId: string) => {\n            dispatch(addNewTaskTC(newText, todolistId));\n        },\n        deleteTL: (todolistId: string) => {\n            dispatch(deleteTLTC(todolistId));\n        },\n        deleteTaskNow: (taskId: string, todolistId: string) => {\n            debugger\n            dispatch(deleteTaskNowTC(taskId, todolistId))\n        },\n        changeTaskNow: (taskId: string, obj: ChangeTaskType, todoListId: string, tasks: Array<TaskType>) => {\n            dispatch(changeTaskNowTC(taskId, obj, todoListId, tasks))\n        }\n    }\n};\n\nconst ConnectedTodolist = connect(null, mapDispatchToProps)(TodoList);\n\nexport default ConnectedTodolist;\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {createTodoListTC, getTodolistTC} from \"./reducer\";\nimport {TodoListType} from \"./types/entities\";\nimport {AppStateType} from \"./store\";\nimport s from './newStyle.module.css'\n\ntype MDTPType = {\n    addTodoList?: (title: string)=> void\n    getTodolists: ()=> void\n    createTodoList: (title: string)=> void\n}\ntype MSTPType = {\n    todolists: Array<TodoListType>\n}\n\nclass App extends React.Component<MDTPType & MSTPType> {\n\n    state = {\n        todolists: []\n    };\n\n    addTodoList = (title: string) => {\n        this.props.createTodoList(title);\n    };\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    restoreState = () => {\n        this.props.getTodolists();\n    };\n\n    render = () => {\n        const todolists = this.props\n            .todolists\n            .map(tl => <TodoList key={tl.id} id={tl.id} title={tl.title} tasks={tl.tasks}/>);\n            // Begin.......................\n        return (\n            <>\n                <div className={s.MainAddNewItemForm}>\n                    <AddNewItemForm addItem={this.addTodoList}/>\n\n                </div>\n                <div className=\"App\">\n                    {todolists}\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MSTPType => {\n    return {\n        todolists: state.todolist.todolists\n    }\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        getTodolists: () => {\n            dispatch(getTodolistTC())\n        },\n        createTodoList : (title: string) => {\n            dispatch(createTodoListTC(title));\n        },\n    }\n};\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default ConnectedApp;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todolist: reducer\r\n});\r\n\r\ntype RootReducer = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducer>\r\n\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n// window.store = store;\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}