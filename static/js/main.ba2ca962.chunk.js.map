{"version":3,"sources":["newStyle.module.css","TodoListTask.tsx","TodoListTasks.tsx","TodoListFooter.tsx","api.ts","TodoListTitle.tsx","AddNewItemForm.tsx","reducer.ts","TodoList.tsx","App.tsx","serviceWorker.js","store.ts","index.tsx"],"names":["module","exports","taskContainer","task","taskChecked","check","delete","title","addSection","taskInput","add","MainAddNewItemForm","list","container","TodoListTask","onIsDoneChanged","e","status","currentTarget","checked","_this","props","changeStatus","id","onTitleChanged","setState","value","state","editMode","isChecked","activateEditMode","deactivateEditMode","changeTitle","onDeleteTask","deleteTask","onIsChecked","render","isDone","priority","react_default","a","createElement","Fragment","className","s","onBlur","onChange","autoFocus","onClick","React","Component","TodoListTasks","tasksElements","tasks","map","src_TodoListTask","TodoListFooter","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","classForAll","filterValue","classForCompleted","classForActive","instance","axios","create","baseURL","withCredentials","headers","API-KEY","api","getTodolists","get","updateTask","t","obj","put","Object","objectSpread2","createTodolist","post","deleteTodolist","todolistId","getTasks","concat","createTask","newText","taskId","updateTodoList","newTitle","TodoListTitle","changeTodolistTitle","then","res","AddNewItemForm","error","onAddItemClick","addItem","onKeyPress","key","type","placeholder","ADD_TASK","initialState","todolists","updateTaskAC","deleteTodolistAC","deleteTaskAC","addTaskAC","newTask","setTasksAC","reducer","arguments","length","undefined","action","tl","toConsumableArray","newTodolist","filter","console","log","TodoList","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getTasksT","addTask","addNewTask","newFilterValue","changeTask","changeTaskNow","deleteTL","deleteTaskNow","_this$props$tasks","src_TodoListTitle","onDelete","src_AddNewItemForm","src_TodoListTasks","src_TodoListFooter","this","ConnectedTodolist","connect","dispatch","setTasks","updateTodoListAC","todoListId","todolisId","_ref3","asyncToGenerator","regenerator_default","mark","_callee3","wrap","_context3","prev","next","allTasks","data","items","stop","_x3","apply","_ref4","_callee4","_context4","item","_x4","addNewTaskTC","_ref5","_callee5","_context5","_x5","deleteTLTC","_ref6","_callee6","_context6","_x6","deleteTaskNowTC","_ref7","_callee7","_context7","forEach","_x7","changeTaskNowTC","App","addTodoList","createTodoList","src_TodoList","ConnectedApp","todolist","_ref","_callee","_context","_x","_ref2","_callee2","_context2","_x2","createTodoListTC","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba2ca962.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskContainer\":\"newStyle_taskContainer__2gavm\",\"task\":\"newStyle_task__2XEZQ\",\"taskChecked\":\"newStyle_taskChecked__17crZ\",\"check\":\"newStyle_check__2cKxS\",\"delete\":\"newStyle_delete__1ZKUa\",\"title\":\"newStyle_title__26W7e\",\"addSection\":\"newStyle_addSection__3y3Sp\",\"taskInput\":\"newStyle_taskInput__13g6f\",\"add\":\"newStyle_add__28hGz\",\"MainAddNewItemForm\":\"newStyle_MainAddNewItemForm__PgTFM\",\"list\":\"newStyle_list__3n9Uw\",\"container\":\"newStyle_container__2utr1\"};","import React, {ChangeEvent} from 'react';\nimport './App.css';\nimport {TaskType} from \"./types/entities\";\nimport s from \"./newStyle.module.css\";\n\ntype TLTType = {\n    task: TaskType\n}\ntype FuncType = {\n    changeStatus: (taskId: string, status: number) => void\n    changeTitle: (taskId: string, title: string) => void\n    deleteTask: (taskId: string) => void\n}\n\nclass TodoListTask extends React.Component<TLTType & FuncType> {\n\n    onIsDoneChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        let status = e.currentTarget.checked ? 2 : 0;\n        this.props.changeStatus(this.props.task.id, status);\n    };\n\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({title: e.currentTarget.value})\n    };\n\n    state = {\n        editMode: false,\n        title: this.props.task.title,\n        isChecked: false,\n    };\n\n    activateEditMode = () => {\n        this.setState({editMode: true});\n\n    };\n\n    deactivateEditMode = () => {\n        this.setState({editMode: false});\n        this.props.changeTitle(this.props.task.id, this.state.title);\n    };\n    onDeleteTask = () => {\n        this.props.deleteTask(this.props.task.id);\n    };\n    onIsChecked = () => {\n        this.setState({isChecked: true})\n    };\n\n    //Begin......................\n\n    render = () => {\n        let containerCssClass = this.props.task.isDone ? \"todoList-task done\" : \"todoList-task\";\n        let priotityTitle = \"\";\n        switch (this.props.task.priority) {\n            case 0:\n                priotityTitle = \"Low\";\n                break;\n            case 1:\n                priotityTitle = \"Middle\";\n                break;\n            case 2:\n                priotityTitle = \"High\";\n                break;\n            case 3:\n                priotityTitle = \"Urgently\";\n                break;\n            case 4:\n                priotityTitle = \"Later\";\n                break;\n        }\n        return (\n            // <div className={s.task}>\n            //     <input type=\"checkbox\" checked={this.props.task.status === 2}\n            //            onChange={this.onIsDoneChanged}/>\n            //     {this.state.editMode\n            //         ? <input onBlur={this.deactivateEditMode} onChange={this.onTitleChanged} autoFocus={true}\n            //                  value={this.state.title}/>\n            //         : <span onClick={this.activateEditMode}>{this.props.task.title}</span>\n            //     }, priority: {priotityTitle}\n            //     <button onClick={this.onDeleteTask}>X</button>\n            // </div>\n            <>\n                <p className={this.state.isChecked ? s.taskChecked : s.task}>\n                    {this.state.editMode\n                        ? <input onBlur={this.deactivateEditMode} onChange={this.onTitleChanged} autoFocus={true}\n                                 value={this.state.title}/>\n                        : <span onClick={this.activateEditMode}>{this.props.task.title}</span>\n                    }\n                    {/*{this.state.title}*/}\n                </p>\n                <i className={s.check} onClick={this.onIsChecked}/>\n                <i className={s.delete} onClick={this.onDeleteTask}/>\n\n            </>\n        );\n    }\n}\n\nexport default TodoListTask;","import React from 'react';\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\nimport {TaskType} from \"./types/entities\";\nimport s from \"./newStyle.module.css\";\n\ntype FuncType = {\n    changeStatus: (taskId: string, status: number) => void\n    changeTitle: (taskId: string, title: string) => void\n    deleteTask: (taskId: string) => void\n}\ntype TLTType = {\n    tasks: Array<TaskType>\n}\n\n\n// Begin............\n\nclass TodoListTasks extends React.Component<FuncType & TLTType> {\n    render = () => {\n        let tasksElements = this.props.tasks.map(\n            task => <TodoListTask task={task}\n                                  changeStatus={this.props.changeStatus}\n                                  changeTitle={this.props.changeTitle}\n                                  deleteTask={this.props.deleteTask}\n            />);\n\n        return (\n            <div className={s.list}>\n                <div className={s.taskContainer}>\n                    {tasksElements}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport '../src/App.css';\n\ntype FuncType = {\n    changeFilter: (newFilterValue: string)=> void\n    filterValue: string\n}\n\nclass TodoListFooter extends React.Component<FuncType> {\n    // state = {\n    //     isHidden: false\n    // };\n\n    onAllFilterClick = () => { this.props.changeFilter(\"All\") };\n    onCompletedFilterClick = () => { this.props.changeFilter(\"Completed\") };\n    onActiveFilterClick = () => { this.props.changeFilter(\"Active\") };\n    // onShowFiltersClick = () => { this.setState({isHidden: true}) };\n    // onHideFiltersClick = () => { this.setState({isHidden: false}) };\n\n    render = () => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n\n        return (\n            <div className=\"todoList-footer\">\n                {/*{ !this.state.isHidden && <div>*/}\n                     <i onClick={ this.onAllFilterClick } id='all' className={classForAll}>All</i>\n                     <i onClick={ this.onCompletedFilterClick } className={classForCompleted}>Completed</i>\n                     <i onClick={ this.onActiveFilterClick } id='active' className={classForActive}>Active</i>\n                {/*  </div>*/}\n                {/*}*/}\n                {/*{ !this.state.isHidden && <span onClick={ this.onShowFiltersClick }>hide</span> }*/}\n                {/*{ this.state.isHidden && <span onClick={ this.onHideFiltersClick }>show</span> }*/}\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import axios from 'axios';\r\nimport {TaskType} from \"./types/entities\";\r\n\r\ntype AddTodoListResponseType = {\r\n    data: {\r\n        item: TaskType\r\n    }\r\n    resultCode: number\r\n    messages: Array<string>\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/todo-lists\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"08777951-79e8-4107-8dc3-392484b36531\"}\r\n});\r\n\r\n\r\nexport const api = {\r\n    getTodolists (){\r\n        return instance.get('')\r\n    },\r\n    updateTask (t: TaskType, obj: any){\r\n        return instance.put(`/tasks`,{...t, ...obj})\r\n    },\r\n    createTodolist (title: string){\r\n        return instance.post<AddTodoListResponseType>('',{title: title})\r\n    },\r\n    deleteTodolist (todolistId: string){\r\n        return instance.delete('' + todolistId)\r\n    },\r\n    getTasks (todolistId: string){\r\n        return instance.get(`/${todolistId}/tasks`)\r\n    },\r\n    createTask(newText: string, todolistId: string){\r\n        return instance.post(`/${todolistId}/tasks`,{title: newText})\r\n    },\r\n    deleteTask(taskId: string, todolistId: string){\r\n        return instance.delete(`/tasks/${taskId}`)\r\n    },\r\n    updateTodoList(todolistId: string, newTitle: string){\r\n        return instance.put(`/${todolistId}`, {title: newTitle})\r\n    },\r\n\r\n};","import React, {ChangeEvent} from 'react';\nimport './App.css';\nimport {api} from \"./api\";\nimport s from \"./newStyle.module.css\";\n\ntype FuncType = {\n    updateTodoList: (todolistId: string, newTitle: string) => void\n    onDelete: () => void\n}\ntype TLTType = {\n    title: string\n    todolistId: string\n}\n\nclass TodoListTitle extends React.Component<TLTType&FuncType> {\n    state = {\n        editMode: false,\n        title: this.props.title\n    };\n    deactivateEditMode = () => {\n        this.setState({editMode: false});\n        this.changeTodolistTitle(this.props.todolistId, this.state.title);\n    };\n    activateEditMode = () => {\n        this.setState({editMode: true});\n\n    };\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({title: e.currentTarget.value})\n    };\n    changeTodolistTitle = (todolistId: string, newTitle: string) => {\n                api.updateTodoList(todolistId, newTitle)\n                    .then(res => {\n                        this.props.updateTodoList(todolistId, newTitle);\n                    });\n            };\n\n// Begin........ Перед бегином обернул всё в дивку className={s.title}\n   render = () => {\n        return (\n            <div className={s.title}>\n                <h3 className=\"todoList-header__title\">\n                    { this.state.editMode\n                        ? <input\n                            onBlur={this.deactivateEditMode}\n                            onChange={this.onTitleChanged}\n                            autoFocus={true}\n                            value={this.state.title}\n                        />\n                        :\n                        <span\n                            onClick={this.activateEditMode}\n                        >{this.props.title}</span>\n                    }\n\n                    {/*<button onClick={this.props.onDelete}>X</button>*/}\n                </h3>\n            </div>\n        );\n    }\n}\n\nexport default TodoListTitle;\n\n","import React, {ChangeEvent} from 'react';\nimport './App.css';\nimport s from \"./newStyle.module.css\";\n\ntype FunctionType = {\n    addItem: (title: string)=> void\n}\n\nclass AddNewItemForm extends React.Component<FunctionType> {\n    state = {\n        error: false,\n        title: \"\"\n    };\n\n    onAddItemClick = () => {\n        let newText = this.state.title;\n        this.setState({title: \"\"});\n\n        if (newText === \"\") {\n            this.setState({error: true});\n        } else {\n            this.setState({error: false});\n            // передаём новый текст наружу\n            this.props.addItem(newText);\n        }\n    };\n\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        debugger\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        });\n    };\n\n    onKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        debugger\n        if (e.key === \"Enter\") {\n            this.onAddItemClick();\n        }\n    };\n\n// Begin........................\n    render = () => {\n        let classNameForInput = this.state.error ? \"error\" : \"\";\n\n        return (\n            <div className={s.addSection}>\n                <input className={s.taskInput} type=\"text\" placeholder=\"New item name\"\n                       onChange={this.onTitleChanged}\n                       onKeyPress={this.onKeyPress}\n                       value={this.state.title}/>\n                <button className={s.add} onClick={this.onAddItemClick}>Add</button>\n            </div>\n\n        );\n    }\n}\n\nexport default AddNewItemForm;\n\n","import {api} from \"./api\";\r\nimport {ChangeTaskType, TaskType, TodoListType} from \"./types/entities\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./store\";\r\n\r\nexport const ADD_TODOLIST = \"TodoList/Reducer/ADD-TODOLIST\";\r\nexport const DELETE_TODOLIST = \"TodoList/Reducer/DELETE-TODOLIST\";\r\nexport const DELETE_TASK = \"TodoList/Reducer/DELETE-TASK\";\r\nexport const ADD_TASK = \"TodoList/Reducer/ADD-TASK\";\r\nexport const SET_TASKS = \"TodoList/Reducer/SET_TASKS\";\r\nexport const UPDATE_TASK = \"TodoList/Reducer/UPDATE-TASK\";\r\nexport const SET_TODOLISTS = \"TodoList/Reducer/SET_TODOLISTS\";\r\nexport const UPDATE_TODOLIST = \"TodoList/Reducer/UPDATE_TODOLIST\";\r\n\r\ntype InitialStateType = {\r\n    todolists: Array<TodoListType>\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    \"todolists\": []\r\n};\r\n\r\nconst reducer = (state: InitialStateType = initialState, action: TodoActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id !== action.todolistId) {\r\n                        return tl;\r\n                    } else {\r\n                        return {...tl, tasks: action.tasks}\r\n                    }\r\n                })\r\n            };\r\n        case SET_TODOLISTS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(tl => ({...tl, tasks: []}))\r\n            };\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, action.newTodolist]\r\n            };\r\n        case DELETE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(tl => tl.id !== action.todolistId)\r\n            };\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.filter(t => t.id !== action.taskId)\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map((tl: TodoListType) => {\r\n                    if (tl.id === action.todolistId && tl.tasks) {\r\n                        return {...tl, tasks: [...tl.tasks, action.newTask]}\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map((tl: TodoListType)  => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.map((t: TaskType) => {\r\n                                if (t.id !== action.taskId) {\r\n                                    return t;\r\n                                } else {\r\n                                    return {...t, ...action.obj};\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            };\r\n        case UPDATE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todolistId) {\r\n                        return {\r\n                            ...tl,\r\n                            title: action.title\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n    }\r\n    console.log(\"reducer: \", action);\r\n    return state;\r\n};\r\n\r\ntype UpdateTodoListACType = {\r\n    type: typeof UPDATE_TODOLIST\r\n    todolistId: string\r\n    title: string\r\n}\r\ntype UpdateTaskACType = {\r\n    type: typeof UPDATE_TASK\r\n    taskId: string\r\n    obj: ChangeTaskType\r\n    todolistId: string\r\n}\r\ntype DeleteTodolistACType = {\r\n    type: typeof DELETE_TODOLIST\r\n    todolistId: string\r\n}\r\ntype DeleteTaskACType = {\r\n    type: typeof DELETE_TASK\r\n    todolistId: string\r\n    taskId: string\r\n}\r\ntype AddTaskACType = {\r\n    type: typeof ADD_TASK\r\n    todolistId: string\r\n    newTask: TaskType\r\n}\r\ntype SetTasksACType = {\r\n    type: typeof SET_TASKS\r\n    todolistId: string\r\n    tasks: Array<TaskType>\r\n}\r\ntype AddTodolistACType = {\r\n    type: typeof ADD_TODOLIST\r\n    newTodolist: TodoListType\r\n}\r\ntype SetTodolistsACType = {\r\n    type: typeof SET_TODOLISTS\r\n    todolists: Array<TodoListType>\r\n}\r\n\r\nexport type TodoActionTypes = UpdateTodoListACType|UpdateTaskACType|DeleteTodolistACType|DeleteTaskACType\r\n                        |AddTaskACType|SetTasksACType|AddTodolistACType|SetTodolistsACType\r\n\r\nexport const updateTodoListAC = (todolistId: string, title: string): UpdateTodoListACType => {\r\n    return {type: UPDATE_TODOLIST, todolistId, title}\r\n};\r\nexport const updateTaskAC = (taskId: string, obj: ChangeTaskType, todolistId: string, tasks: Array<TaskType>): UpdateTaskACType => {\r\n    return {type: UPDATE_TASK, taskId, obj, todolistId};\r\n};\r\nexport const deleteTodolistAC = (todolistId: string): DeleteTodolistACType => {\r\n    return {type: DELETE_TODOLIST, todolistId: todolistId};\r\n};\r\nexport const deleteTaskAC = (taskId: string, todolistId: string): DeleteTaskACType => {\r\n    return {type: DELETE_TASK, todolistId, taskId};\r\n};\r\nexport const addTaskAC = (newTask: TaskType, todolistId: string): AddTaskACType => {\r\n    return {type: ADD_TASK, newTask, todolistId};\r\n};\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string): SetTasksACType => {\r\n    return {type: SET_TASKS, tasks, todolistId};\r\n};\r\nexport const addTodolistAC = (newTodolist: TodoListType): AddTodolistACType => {\r\n    return {type: ADD_TODOLIST, newTodolist: newTodolist}\r\n};\r\nexport const setTodolistsAC = (todolists: Array<TodoListType>): SetTodolistsACType => {\r\n    return {type: SET_TODOLISTS,todolists: todolists}\r\n};\r\n\r\n//Thunk\r\nexport type ThunkActionType = ThunkAction<Promise<void>, AppStateType, unknown, TodoActionTypes>\r\nexport const getTodolistTC = (): ThunkActionType => async (dispatch) => {\r\n    api.getTodolists()\r\n        .then(res => {\r\n            dispatch(setTodolistsAC(res.data))\r\n        })\r\n};\r\nexport const createTodoListTC = (title: string): ThunkActionType => async (dispatch) => {\r\n    api.createTodolist(title)\r\n        .then(res => {\r\n            let todolist = res.data.data.item;\r\n            dispatch(addTodolistAC({...todolist, tasks: []}));\r\n        });\r\n};\r\nexport const getTasksTC = (todolisId: string): ThunkActionType => async (dispatch) => {\r\n    api.getTasks(todolisId)\r\n        .then(res => {\r\n            let allTasks = res.data.items;\r\n            dispatch(setTasksAC(allTasks, todolisId));\r\n        });\r\n};\r\nexport const addNewTaskTC = (newTask: string, todolistId: string): ThunkActionType => async (dispatch) => {\r\n    api.createTask(newTask, todolistId)\r\n        .then(res => {\r\n            let newTask = res.data.data.item;\r\n            dispatch(addTaskAC(newTask, todolistId));\r\n        });\r\n};\r\nexport const deleteTLTC = (todolistId: string): ThunkActionType => async (dispatch) => {\r\n    api.deleteTodolist(todolistId)\r\n        .then(() => {\r\n            dispatch(deleteTodolistAC(todolistId));\r\n        });\r\n};\r\n\r\nexport const deleteTaskNowTC = (taskId: string, todolistId: string): ThunkActionType => async (dispatch) => {\r\n    api.deleteTask(taskId, todolistId)\r\n        .then(res => {\r\n            dispatch(deleteTaskAC(taskId, todolistId));\r\n        });\r\n};\r\nexport const changeTaskNowTC = (taskId: string, obj: ChangeTaskType, todoListId: string, tasks: Array <TaskType>): ThunkActionType =>\r\n    async (dispatch) => {\r\n    tasks.forEach(t => {\r\n        if (t.id === taskId) {\r\n            api.updateTask(t, obj)\r\n                .then(res => {\r\n                    dispatch(updateTaskAC(taskId, obj, todoListId, tasks));\r\n                });\r\n        }\r\n    })\r\n};\r\n\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport './App.css';\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport TodoListTitle from \"./TodoListTitle\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {\n    addNewTaskTC,\n    addTaskAC, changeTaskNowTC,\n    deleteTaskAC, deleteTaskNowTC, deleteTLTC,\n    deleteTodolistAC,\n    getTasksTC,\n    setTasksAC,\n    updateTodoListAC\n} from \"./reducer\";\nimport {ChangeTaskType, TaskType} from \"./types/entities\";\nimport s from \"./newStyle.module.css\";\n\n\ntype MDTPType = {\n    addTask: (newTask: TaskType, todolistId: string)=> void\n    deleteTodolist: (todolistId: string)=> void\n    deleteTask: (taskId: string, todolistId: string)=> void\n    updateTodoList: (todolistId: string, title: string) => void\n    getTasksT: (todoListId: string) => void\n    addNewTask: (newText: string, todolistId: string) => void\n    deleteTL: (todolistId: string) => void\n    deleteTaskNow: (taskId: string, todolistId: string) => void\n    changeTaskNow: (taskId: string, obj: ChangeTaskType, todoListId: string, tasks: Array<TaskType>) => void\n}\ntype AnotherType = {\n    id: string\n    tasks: Array<TaskType>\n    title: string\n}\n\n// Begin..............................\n\nclass TodoList extends React.Component<MDTPType&AnotherType> {\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    saveState = () => {\n        // переводим объект в строку\n        let stateAsString = JSON.stringify(this.state);\n        // сохраняем нашу строку в localStorage под ключом \"our-state\"\n        localStorage.setItem(\"our-state-\" + this.props.id, stateAsString);\n    };\n\n    restoreState = () => {\n        this.props.getTasksT(this.props.id);\n    };\n\n    state = {\n        filterValue: \"All\"\n    };\n\n    addTask = (newText: string) => {\n        this.props.addNewTask(newText, this.props.id)\n    };\n\n    changeFilter = (newFilterValue: string) => {\n        this.setState( {\n            filterValue: newFilterValue\n        }, () => { this.saveState(); });\n    };\n\n    changeTask = (taskId: string, obj: ChangeTaskType) => {\n        let tasks = this.props.tasks;\n        this.props.changeTaskNow(taskId, obj, this.props.id, tasks);\n    };\n\n    changeStatus = (taskId: string, status: number) => {\n        debugger\n        this.changeTask(taskId, {status: status});\n    };\n\n    changeTitle = (taskId: string, title: string) => {\n        this.changeTask(taskId, {title: title});\n    };\n\n    deleteTodolist = () => {\n        this.props.deleteTL(this.props.id);\n    };\n\n    deleteTask = (taskId: string) => {\n        this.props.deleteTaskNow(taskId, this.props.id);\n    };\n\n    render = () => {\n        let {tasks = []} = this.props;\n        return (\n                <div className={s.container}>\n                    <div className=\"todoList-header\">\n                            <TodoListTitle\n                                title={this.props.title}\n                                todolistId={this.props.id}\n                                onDelete={this.deleteTodolist}\n                                updateTodoList={this.props.updateTodoList}/>\n                            <AddNewItemForm addItem={this.addTask} />\n\n                    </div>\n\n                    <TodoListTasks changeStatus={this.changeStatus }\n                                   changeTitle={this.changeTitle }\n                                   deleteTask={this.deleteTask}\n                                   tasks={tasks.filter((t: TaskType) => {\n                        if (this.state.filterValue === \"All\") {\n                            return true;\n                        }\n                        if (this.state.filterValue === \"Active\") {\n                            return t.isDone === false;\n                        }\n                        if (this.state.filterValue === \"Completed\") {\n                            return t.isDone === true;\n                        }\n                    })}/>\n                    <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue} />\n                </div>\n        );\n    }\n}\n\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        addTask(newTask: TaskType, todolistId: string) {\n            dispatch(addTaskAC(newTask, todolistId));\n        },\n        setTasks(tasks: Array<TaskType>, todolistId: string) {\n            dispatch(setTasksAC(tasks, todolistId));\n        },\n        deleteTodolist: (todolistId: string) => {\n            const action = deleteTodolistAC(todolistId);\n            dispatch(action)\n        },\n        deleteTask: (taskId: string, todolistId: string) => {\n            const action = deleteTaskAC(todolistId, taskId);\n            dispatch(action)\n        },\n        updateTodoList: (todolistId: string, title: string) => {\n            const action = updateTodoListAC(todolistId, title);\n            dispatch(action)\n        },\n        getTasksT: (todoListId: string) => {\n            dispatch(getTasksTC(todoListId));\n        },\n        addNewTask: (newText: string, todolistId: string) => {\n            dispatch(addNewTaskTC(newText, todolistId));\n        },\n        deleteTL: (todolistId: string) => {\n            dispatch(deleteTLTC(todolistId));\n        },\n        deleteTaskNow: (taskId: string, todolistId: string) => {\n            debugger\n            dispatch(deleteTaskNowTC(taskId, todolistId))\n        },\n        changeTaskNow: (taskId: string, obj: ChangeTaskType, todoListId: string, tasks: Array<TaskType>) => {\n            dispatch(changeTaskNowTC(taskId, obj, todoListId, tasks))\n        }\n    }\n};\n\nconst ConnectedTodolist = connect(null, mapDispatchToProps)(TodoList);\n\nexport default ConnectedTodolist;\n\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddNewItemForm from \"./AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {createTodoListTC, getTodolistTC} from \"./reducer\";\nimport {TodoListType} from \"./types/entities\";\nimport {AppStateType} from \"./store\";\nimport s from './newStyle.module.css'\n\ntype MDTPType = {\n    addTodoList?: (title: string)=> void\n    getTodolists: ()=> void\n    createTodoList: (title: string)=> void\n}\ntype MSTPType = {\n    todolists: Array<TodoListType>\n}\n\nclass App extends React.Component<MDTPType & MSTPType> {\n\n    state = {\n        todolists: []\n    };\n\n    addTodoList = (title: string) => {\n        this.props.createTodoList(title);\n    };\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    restoreState = () => {\n        this.props.getTodolists();\n    };\n\n    render = () => {\n        const todolists = this.props\n            .todolists\n            .map(tl => <TodoList key={tl.id} id={tl.id} title={tl.title} tasks={tl.tasks}/>);\n            // Begin.......................\n        return (\n            <>\n                <div className={s.MainAddNewItemForm}>\n                    <AddNewItemForm addItem={this.addTodoList}/>\n                </div>\n                <div className=\"App\">\n                    {todolists}\n                </div>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MSTPType => {\n    return {\n        todolists: state.todolist.todolists\n    }\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        getTodolists: () => {\n            dispatch(getTodolistTC())\n        },\n        createTodoList : (title: string) => {\n            dispatch(createTodoListTC(title));\n        },\n    }\n};\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default ConnectedApp;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todolist: reducer\r\n});\r\n\r\ntype RootReducer = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducer>\r\n\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n// window.store = store;\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}